#Copyright 2017 Eric T. Anderson
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the license.
#==============================
"""
A suite of collection classes that emulate a small subset of those in the
Scala standard library.
"""
class Either(object):
    __slots__ = ['_content', '_is_left']
    try:
        from typing import Any, Dict, Callable, Iterable, Tuple
        import typing
    except ImportError:
        Any, Dict, Callable, Iterable, Tuple = ["Any", "Dict", "Callable", "Iterable", "Tuple"]

    def __init__(self, value, is_left) -> None:
        super(Either, self).__init__()
        self._content = value
        self._is_left = is_left

    def __eq__(self,other:Any) -> bool = (self.__class__ == other.__class__) and self.get == other.get

    def __ne__(self,other:Any) -> bool = not self.__eq__(other)

    def fold(self, do_left:Callable[[Any],Any], do_right:Callable[[Any], Any]) -> Any =
        do_left(self._content) if self._is_left else do_right(self._content)

    @property
    def get(self) ->Any = self._content

    @property
    def isLeft(self) -> bool = self._is_left

    @property
    def isRight(self) -> bool = not self._is_left

class Left(Either):

    def __init__(self, value=None) -> None:
        super(Left, self).__init__(value, True)

class Right(Either):

    def __init__(self, value=None) -> None:
        super(Right, self).__init__(value, False)
